#!/usr/bin/env node

/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ (function(module) {

module.exports = require("child_process");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ (function(module) {

module.exports = require("fs");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
/*!*************************************!*\
  !*** ./services/elevate-service.ts ***!
  \*************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ "fs");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! child_process */ "child_process");
/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_1__);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }



process.env.PATH = "/usr/sbin:".concat(process.env.PATH);

function isFile(path) {
  try {
    return (0,fs__WEBPACK_IMPORTED_MODULE_0__.statSync)(path).isFile();
  } catch (err) {
    return false;
  }
}

function patchServiceFile(serviceFile, appName, serviceName) {
  var serviceFileOriginal = (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(serviceFile).toString();
  var serviceFileNew;

  console.info("[ ] Updating a Native-Service.");

  if (appName && serviceName) {
    serviceFileNew = serviceFileOriginal.replace('/usr/bin/jailer -t native_devmode -i ' + appName + ' -p /media/developer/apps/usr/palm/services/' + serviceName + ' ', '');
  } else {
    console.info("[!] Updating Native-Service failed! Didn't got appName or serviceName.");
  }

  if (serviceFileNew !== serviceFileOriginal) {
    console.info("[ ] Updating service definition: ".concat(serviceFile));
    console.info('-', serviceFileOriginal);
    console.info('+', serviceFileNew);
    (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(serviceFile, serviceFileNew);
    return true;
  }

  return false;
}

function main(argv) {
  var _argv = _slicedToArray(argv, 2),
      _argv$ = _argv[0],
      serviceName = _argv$ === void 0 ? 'org.webosbrew.hbchannel.service' : _argv$,
      _argv$2 = _argv[1],
      appName = _argv$2 === void 0 ? serviceName.split('.').slice(0, -1).join('.') : _argv$2;

  if (serviceName === 'org.webosbrew.hbchannel') {
    serviceName = 'org.webosbrew.hbchannel.service';
    appName = 'org.webosbrew.hbchannel';
  }

  var configChanged = false;
  var serviceFile = "/var/luna-service2-dev/services.d/".concat(serviceName, ".service");
  var clientPermFile = "/var/luna-service2-dev/client-permissions.d/".concat(serviceName, ".root.json");
  var apiPermFile = "/var/luna-service2-dev/client-permissions.d/".concat(serviceName, ".api.public.json");
  var manifestFile = "/var/luna-service2-dev/manifests.d/".concat(appName, ".json");
  var roleFile = "/var/luna-service2-dev/roles.d/".concat(serviceName, ".service.json");

  if (isFile(serviceFile)) {
    console.info("[~] Found webOS 3.x+ service file: ".concat(serviceFile));

    if (patchServiceFile(serviceFile, appName, serviceName)) {
      configChanged = true;
    }

    if (!isFile(clientPermFile)) {
      console.info("[ ] Creating client permissions file: ".concat(clientPermFile));
      (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(clientPermFile, JSON.stringify(_defineProperty({}, "".concat(serviceName, "*"), ['all'])));
      configChanged = true;
    }

    if (!isFile(apiPermFile)) {
      console.info("[ ] Creating API permissions file: ".concat(apiPermFile));
      (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(apiPermFile, JSON.stringify({
        public: ["".concat(serviceName, "/*")]
      }));
      configChanged = true;
    }

    if (isFile(manifestFile)) {
      console.info("[~] Found webOS 4.x+ manifest file: ".concat(manifestFile));
      var manifestFileOriginal = (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(manifestFile).toString();
      var manifestFileParsed = JSON.parse(manifestFileOriginal);

      if (manifestFileParsed.clientPermissionFiles && manifestFileParsed.clientPermissionFiles.indexOf(clientPermFile) === -1) {
        console.info('[ ] manifest - adding client permissions file...');
        manifestFileParsed.clientPermissionFiles.push(clientPermFile);
      }

      if (manifestFileParsed.apiPermissionFiles && manifestFileParsed.apiPermissionFiles.indexOf(apiPermFile) === -1) {
        console.info('[ ] manifest - adding API permissions file...');
        manifestFileParsed.apiPermissionFiles.push(apiPermFile);
      }

      var manifestFileNew = JSON.stringify(manifestFileParsed);

      if (manifestFileNew !== manifestFileOriginal) {
        console.info("[~] Updating manifest file: ".concat(manifestFile));
        console.info('-', manifestFileOriginal);
        console.info('+', manifestFileNew);
        (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(manifestFile, manifestFileNew);
        configChanged = true;
      }
    }

    if (isFile(roleFile)) {
      console.info("[~] Found webOS 4.x+ role file: ".concat(roleFile));
      var roleFileOriginal = (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(roleFile).toString();
      var roleFileParsed = JSON.parse(roleFileOriginal);

      if (roleFileParsed.allowedNames.some(function (finding) {
        if (finding === "*") {
          return true;
        } else {
          return false;
        }
      })) {
        console.info('[ ] role - already containing wildcard for allowed names.');
      } else {
        console.info('[ ] role - pushing wildcard for allowed names to file...');
        roleFileParsed.allowedNames.push("*");
      }

      if (roleFileParsed.permissions.some(function (finding) {
        if (finding === "*") {
          return true;
        } else {
          return false;
        }
      })) {
        console.info('[ ] role - already containing wildcard for service permissions.');
      } else {
        console.info('[ ] role - pushing wildcard for service permissions to file...');
        roleFileParsed.permissions.push({
          "service": "*",
          "outbound": ["*"],
          "inbound": ["*"]
        });
      }

      var roleFileNew = JSON.stringify(roleFileParsed);

      if (roleFileNew !== roleFileOriginal) {
        console.info("[~] Updating role file: ".concat(roleFile));
        console.info('-', roleFileOriginal);
        console.info('+', roleFileNew);
        (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(roleFile, roleFileNew);
        configChanged = true;
      }
    }
  }

  var legacyPubServiceFile = "/var/palm/ls2-dev/services/pub/".concat(serviceName, ".service");
  var legacyPrvServiceFile = "/var/palm/ls2-dev/services/pub/".concat(serviceName, ".service");
  var legacyPrvRolesFile = "/var/palm/ls2-dev/roles/prv/".concat(serviceName, ".json");

  if (isFile(legacyPubServiceFile)) {
    console.info("[~] Found legacy webOS <3.x service file: ".concat(legacyPubServiceFile));

    if (patchServiceFile(legacyPubServiceFile)) {
      configChanged = true;
    }

    if (patchServiceFile(legacyPrvServiceFile)) {
      configChanged = true;
    }

    if (isFile(legacyPrvRolesFile)) {
      var prvRolesOriginal = (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(legacyPrvRolesFile).toString();
      var prvRolesNew = prvRolesOriginal.replace('"outbound":[]', '"outbound":["*"]');

      if (prvRolesNew !== prvRolesOriginal) {
        console.info("[ ] Updating service definition: ".concat(legacyPrvRolesFile));
        console.info('-', prvRolesOriginal);
        console.info('+', prvRolesNew);
        (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(legacyPrvRolesFile, prvRolesNew);
        configChanged = true;
      }
    }
  }

  if (configChanged) {
    console.info('[+] Refreshing services...');
    (0,child_process__WEBPACK_IMPORTED_MODULE_1__.execFile)('ls-control', ['scan-services'], function (err, stderr, stdout) {
      if (err) {
        console.error(err);
        process.exit(1);
      }

      if (stdout) console.info(stdout);
      if (stderr) console.info(stderr);
      process.exit(0);
    });
  } else {
    console.info('[-] No changes, no rescan needed');
  }
}

main(process.argv.slice(2));
}();
/******/ })()
;